# std::map
snippet map
	std::map< ${1:key}, ${2:value} > map${3};
# std::vector
snippet vector
	std::vector< ${1:char} > v${2};
# Namespace
snippet ns
	namespace ${1:`Filename('', 'my')`} 
	{
	${2}
	} // namespace $1
# Class
snippet cl
	class ${1:`Filename('$1', 'name')`} 
	{
	public:
	    $1 (${2});
	    ${4:virtual }~$1 ();
	
	protected:
	    ${3:/* data */}
	};
# Class implementation
snippet cli
	${1:`Filename('$1', 'name')`}::$1(${2})
	{
	}

	$1::~$1()
	{
	}
#iostream
snippet iostream
	#include <iostream>
# Boost serialization
snippet serialize
	template < typename Archive >
	void serialize(Archive& ar, const unsigned int /*unused*/)
	{
	    ${1:/* serialization code */}
	}
# Salida por pantalla
snippet cout
	std::cout << ${1:""} << std::endl;
# Traza
snippet trace
	std::cout << __FUNCTION__ << " ${1}" << std::endl;
# Bucle
snippet fori
	for (int ${2:i} = 0; $2 < ${1:count}; $2${3:++}) 
	{
	    ${4}
	}
# auto iterator
snippet itera
	for (auto ${1:i} = $2.begin(); $1 != $2.end(); ++$1)
	{
	    ${2:std::cout << *$1 << std::endl;}
	}
# iterator
snippet iterv
	for (${1:std::vector}< ${2:type} >::${3:const_iterator} ${4:i} = ${5:container}.begin(); $4 != $5.end(); ++$4) 
	{
	    ${6}
	}
# iterator
snippet iter
	for (${1:type}::${2:const_iterator} ${3:it} = ${4:container}.begin(); $3 != $4.end(); ++$3) 
	{
	    ${5}
	}
# member function implementations
snippet mfun
	${4:void} ${1:`Filename('$1', 'ClassName')`}::${2:memberFunction}(${3})
	{
	    ${5:return};
	}
# templates
snippet template1
	template< typename ${3:T} >
	${2:struct} ${1:`Filename('', 'st')`}
	{
	};
# template 2
snippet template2
	template< typename ${3:T}, typename ${4:Y} >
	${2:struct} ${1:`Filename('', 'st')`}
	{
	};
# Shared_ptr
snippet shared
	boost::shared_ptr< ${1:T} >

# Pruebas rapidas
snippet prueba
	#include <iostream>

	int main(int argc, char **argv)
	{
	    ${1}
	    return 0;
	}
# boost
snippet boost
	#include <boost/${1:shared_ptr}.hpp>
# qwidget
snippet qwidget
	class ${1:`Filename('', '')`} : public QWidget
	{
		Q_OBJECT
	public:
		$1(QWidget * parent = 0);
		virtual ~$1();
	};
#qwidgetcpp
snippet qwidgetcpp
	${1:`Filename('', '')`}::$1(QWidget * parent) :
		QWidget(parent)
	{
	}

	$1::~$1()
	{
	}
